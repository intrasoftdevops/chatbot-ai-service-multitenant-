name: Deploy chatbot-ai-service-multitenant (dev/prod)

on:
  push:
    branches: [ dev, main ]

env:
  GCP_PROJECT_ID: political-referrals
  GCP_REGION: us-central1

jobs:
  deploy:
    name: Deploy chatbot-ai-service (${{ matrix.env_name }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - branch: dev
            env_name: dev
            service_name: chatbot-ai-service-dev
            runtime_env: ENVIRONMENT=development
          - branch: main
            env_name: prod
            service_name: chatbot-ai-service-prod
            runtime_env: ENVIRONMENT=production
    steps:
      - name: Checkout
        if: github.ref_name == matrix.branch
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        if: github.ref_name == matrix.branch
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        if: github.ref_name == matrix.branch
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Verify gcloud auth
        if: github.ref_name == matrix.branch
        run: |
          gcloud auth list
          gcloud config list project
          echo "‚úÖ Authenticated successfully"

      - name: Deploy ${{ matrix.service_name }}
        if: github.ref_name == matrix.branch
        run: |
          # Configurar secretos seg√∫n el entorno
          if [ "${{ matrix.env_name }}" = "dev" ]; then
            PR_SERVICE_SECRET="POLITICAL_REFERRALS_SERVICE_URL_DEV:latest"
            GAMIFICATION_SECRET="GAMIFICATION_SERVICE_URL_DEV:latest"
          else
            PR_SERVICE_SECRET="POLITICAL_REFERRALS_SERVICE_URL_PROD:latest"
            GAMIFICATION_SECRET="GAMIFICATION_SERVICE_URL_PROD:latest"
          fi
          
          # Deploy con variables de entorno y secretos de Secret Manager
          gcloud run deploy "${{ matrix.service_name }}" \
            --project "${{ env.GCP_PROJECT_ID }}" \
            --region "${{ env.GCP_REGION }}" \
            --source . \
            --allow-unauthenticated \
            --clear-base-image \
            --set-env-vars "${{ matrix.runtime_env }},FIRESTORE_PROJECT_ID=political-referrals,FIRESTORE_DATABASE_ID=(default),REDIS_ENABLED=true,REDIS_PORT=6379,REDIS_DB=0,REDIS_SOCKET_TIMEOUT=5,CONFIGURATION_SERVICE_URL=https://political-referrals-multitenant-wa-dev-574484297461.us-central1.run.app,USE_GEMINI_CLIENT=true,USE_ADVANCED_MODEL_CONFIGS=true,USE_RAG_ORCHESTRATOR=true,USE_GUARDRAILS=true,STRICT_GUARDRAILS=true,LOG_LEVEL=INFO" \
            --set-secrets="GEMINI_API_KEY=gemini-api-key:latest" \
            --set-secrets="REDIS_HOST=redis-host:latest" \
            --set-secrets="REDIS_PASSWORD=redis-password:latest" \
            --set-secrets="WATI_API_TOKEN=WATI_API_TOKEN:latest" \
            --set-secrets="POLITICAL_REFERRALS_SERVICE_URL=$PR_SERVICE_SECRET" \
            --set-secrets="GAMIFICATION_SERVICE_URL=$GAMIFICATION_SECRET" \
            --memory=2Gi \
            --cpu=2 \
            --max-instances=10 \
            --min-instances=1 \
            --timeout=900s \
            --concurrency=100 \
            --port=8000 \
            --use-http2
          
          # Esperar un momento para que el servicio se inicie
          echo "‚è≥ Esperando que el servicio se inicie..."
          sleep 30
          
          # Obtener la URL del servicio desplegado
          SERVICE_URL=$(gcloud run services describe "${{ matrix.service_name }}" \
            --project "${{ env.GCP_PROJECT_ID }}" \
            --region "${{ env.GCP_REGION }}" \
            --format="value(status.url)")
          
          echo "üîó URL del servicio: $SERVICE_URL"
          
          # Hacer readiness check para activar el servicio
          echo "üè• Ejecutando readiness check para activar el servicio..."
          curl -f "$SERVICE_URL/ready" || {
            echo "‚ö†Ô∏è Readiness check fall√≥, pero el servicio puede estar inici√°ndose..."
            echo "üîÑ Reintentando en 30 segundos..."
            sleep 30
            curl -f "$SERVICE_URL/ready" || {
              echo "‚ùå Readiness check fall√≥ despu√©s del segundo intento"
              exit 1
            }
          }
          
          echo "‚úÖ Servicio desplegado y funcionando correctamente"
          echo "üéâ Deploy completado exitosamente - preprocesamiento s√≠ncrono completado durante startup"