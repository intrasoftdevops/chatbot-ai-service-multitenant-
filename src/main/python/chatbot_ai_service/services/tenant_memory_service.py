"""
Servicio de memoria persistente por tenant-usuario

Mantiene una "conciencia" del tenant para cada usuario, formada al iniciar el servicio
usando los datos precargados. Esto permite respuestas m√°s r√°pidas sin buscar cada vez.
"""
import logging
import time
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict
from datetime import datetime
import json

logger = logging.getLogger(__name__)

@dataclass
class TenantConsciousness:
    """Representa la conciencia del tenant para un usuario espec√≠fico"""
    tenant_id: str
    user_phone: str
    tenant_config: Dict[str, Any]
    document_summary: str
    campaign_context: str
    common_responses: Dict[str, str]  # Cache de respuestas frecuentes
    last_updated: float
    created_at: float

@dataclass
class TenantMemory:
    """Memoria global del tenant con informaci√≥n precargada"""
    tenant_id: str
    tenant_config: Dict[str, Any]
    document_summary: str
    campaign_context: str
    common_questions: List[str]
    precomputed_responses: Dict[str, str]
    last_updated: float

class TenantMemoryService:
    """Servicio para gestionar memoria persistente por tenant-usuario"""
    
    def __init__(self):
        # Memoria global por tenant (se forma al iniciar el servicio)
        self._tenant_memories: Dict[str, TenantMemory] = {}
        
        # Conciencia espec√≠fica por usuario-tenant
        self._user_consciousness: Dict[str, TenantConsciousness] = {}
        
        # TTL para limpiar memorias inactivas
        self._memory_ttl = 3600  # 1 hora
        self._consciousness_ttl = 1800  # 30 minutos
        
        logger.info("üß† TenantMemoryService inicializado")
    
    def initialize_tenant_memory(self, tenant_id: str, tenant_config: Dict[str, Any], 
                                document_summary: str = "") -> bool:
        """Inicializa la memoria global del tenant al arrancar el servicio"""
        try:
            # Crear contexto de campa√±a desde la configuraci√≥n
            campaign_context = self._build_campaign_context(tenant_config)
            
            # Crear preguntas comunes basadas en la configuraci√≥n
            common_questions = self._generate_common_questions(tenant_config)
            
            # Precomputar respuestas comunes
            precomputed_responses = self._precompute_common_responses(
                tenant_config, campaign_context, common_questions
            )
            
            memory = TenantMemory(
                tenant_id=tenant_id,
                tenant_config=tenant_config,
                document_summary=document_summary,
                campaign_context=campaign_context,
                common_questions=common_questions,
                precomputed_responses=precomputed_responses,
                last_updated=time.time()
            )
            
            self._tenant_memories[tenant_id] = memory
            
            logger.info(f"üß† Memoria del tenant {tenant_id} inicializada:")
            logger.info(f"  - Contexto de campa√±a: {len(campaign_context)} caracteres")
            logger.info(f"  - Preguntas comunes: {len(common_questions)}")
            logger.info(f"  - Respuestas precomputadas: {len(precomputed_responses)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando memoria del tenant {tenant_id}: {e}")
            return False
    
    def get_or_create_user_consciousness(self, tenant_id: str, user_phone: str) -> TenantConsciousness:
        """Obtiene o crea la conciencia espec√≠fica del usuario para el tenant"""
        consciousness_key = f"{tenant_id}:{user_phone}"
        
        # Limpiar conciencias expiradas
        self._cleanup_expired_consciousness()
        
        if consciousness_key in self._user_consciousness:
            consciousness = self._user_consciousness[consciousness_key]
            consciousness.last_updated = time.time()
            return consciousness
        
        # Crear nueva conciencia basada en la memoria del tenant
        tenant_memory = self._tenant_memories.get(tenant_id)
        if not tenant_memory:
            logger.warning(f"‚ö†Ô∏è No hay memoria del tenant {tenant_id} para crear conciencia")
            return None
        
        consciousness = TenantConsciousness(
            tenant_id=tenant_id,
            user_phone=user_phone,
            tenant_config=tenant_memory.tenant_config.copy(),
            document_summary=tenant_memory.document_summary,
            campaign_context=tenant_memory.campaign_context,
            common_responses=tenant_memory.precomputed_responses.copy(),
            last_updated=time.time(),
            created_at=time.time()
        )
        
        self._user_consciousness[consciousness_key] = consciousness
        
        logger.info(f"üß† Nueva conciencia creada: {tenant_id}:{user_phone}")
        return consciousness
    
    def get_fast_response(self, tenant_id: str, user_phone: str, query: str) -> Optional[str]:
        """Intenta obtener una respuesta r√°pida desde la conciencia del usuario"""
        consciousness = self.get_or_create_user_consciousness(tenant_id, user_phone)
        if not consciousness:
            logger.warning(f"‚ö†Ô∏è No se pudo crear conciencia para {tenant_id}:{user_phone}")
            return None
        
        query_lower = query.lower().strip()
        logger.info(f"üîç Buscando respuesta r√°pida para: '{query_lower}' en tenant {tenant_id}")
        logger.info(f"üîç Patrones disponibles: {list(consciousness.common_responses.keys())}")
        
        # Buscar respuesta precomputada con coincidencia flexible
        for pattern, response in consciousness.common_responses.items():
            if pattern in query_lower:
                logger.info(f"üöÄ Respuesta r√°pida encontrada para patr√≥n: '{pattern}' en consulta: '{query_lower}'")
                return response
        
        # Buscar coincidencias parciales (palabras clave)
        for pattern, response in consciousness.common_responses.items():
            pattern_words = pattern.split()
            if any(word in query_lower for word in pattern_words):
                logger.info(f"üöÄ Respuesta r√°pida encontrada por palabra clave: '{pattern}' en consulta: '{query_lower}'")
                return response
        
        # Buscar en preguntas comunes desde la memoria del tenant
        tenant_memory = self._tenant_memories.get(tenant_id)
        if tenant_memory and tenant_memory.common_questions:
            for question in tenant_memory.common_questions:
                if any(word in query_lower for word in question.lower().split()):
                    # Generar respuesta r√°pida basada en el contexto
                    logger.info(f"üöÄ Respuesta r√°pida encontrada por pregunta com√∫n: '{question}' en consulta: '{query_lower}'")
                    return self._generate_quick_response(consciousness, query)
        
        logger.info(f"‚ö†Ô∏è No se encontr√≥ respuesta r√°pida para: '{query_lower}' - continuando con flujo normal")
        return None
    
    def update_user_context(self, tenant_id: str, user_phone: str, 
                           context_data: Dict[str, Any]) -> bool:
        """Actualiza el contexto espec√≠fico del usuario"""
        consciousness = self.get_or_create_user_consciousness(tenant_id, user_phone)
        if not consciousness:
            return False
        
        # Actualizar contexto del usuario en la configuraci√≥n
        if 'user_context' not in consciousness.tenant_config:
            consciousness.tenant_config['user_context'] = {}
        
        consciousness.tenant_config['user_context'].update(context_data)
        consciousness.last_updated = time.time()
        
        logger.info(f"üß† Contexto actualizado para {tenant_id}:{user_phone}")
        return True
    
    def get_tenant_context(self, tenant_id: str) -> Optional[Dict[str, Any]]:
        """Obtiene el contexto completo del tenant"""
        tenant_memory = self._tenant_memories.get(tenant_id)
        if not tenant_memory:
            return None
        
        return {
            'tenant_config': tenant_memory.tenant_config,
            'campaign_context': tenant_memory.campaign_context,
            'document_summary': tenant_memory.document_summary,
            'common_questions': tenant_memory.common_questions,
            'precomputed_responses': tenant_memory.precomputed_responses
        }
    
    def _build_campaign_context(self, tenant_config: Dict[str, Any]) -> str:
        """Construye el contexto de campa√±a desde la configuraci√≥n"""
        context_parts = []
        
        # Informaci√≥n de branding
        branding = tenant_config.get('branding', {})
        if branding:
            contact_name = branding.get('contactName', 'el candidato')
            candidate_name = branding.get('candidateName', contact_name)
            campaign_name = branding.get('campaignName', 'la campa√±a')
            
            context_parts.append(f"Candidato: {candidate_name}")
            context_parts.append(f"Campa√±a: {campaign_name}")
            context_parts.append(f"Contacto: {contact_name}")
            
            if branding.get('welcomeMessage'):
                context_parts.append(f"Mensaje de bienvenida: {branding['welcomeMessage']}")
        
        # Informaci√≥n de features
        features = tenant_config.get('features', {})
        if features:
            if features.get('ai_enabled'):
                context_parts.append("IA habilitada para respuestas inteligentes")
            if features.get('referrals_enabled'):
                context_parts.append("Sistema de referidos activo")
        
        # Informaci√≥n de AI
        ai_config = tenant_config.get('aiConfig', {})
        if ai_config:
            model = ai_config.get('model', 'gemini-pro')
            context_parts.append(f"Modelo de IA: {model}")
        
        return "\n".join(context_parts)
    
    def _generate_common_questions(self, tenant_config: Dict[str, Any]) -> List[str]:
        """Genera preguntas comunes basadas en la configuraci√≥n del tenant"""
        questions = []
        
        branding = tenant_config.get('branding', {})
        contact_name = branding.get('contactName', 'el candidato')
        
        # Preguntas comunes de campa√±a pol√≠tica
        questions.extend([
            f"¬øQui√©n es {contact_name}?",
            f"¬øCu√°les son las propuestas de {contact_name}?",
            f"¬øC√≥mo puedo apoyar a {contact_name}?",
            f"¬øD√≥nde puedo conocer m√°s sobre {contact_name}?",
            f"¬øCu√°les son los logros de {contact_name}?",
            "¬øC√≥mo puedo participar en la campa√±a?",
            "¬øQu√© hace diferente a este candidato?",
            "¬øC√≥mo puedo ayudar como voluntario?",
            "¬øD√≥nde puedo agendar una cita?",
            "¬øC√≥mo funciona el sistema de referidos?"
        ])
        
        return questions
    
    def _precompute_common_responses(self, tenant_config: Dict[str, Any], 
                                   campaign_context: str, 
                                   common_questions: List[str]) -> Dict[str, str]:
        """Precomputa respuestas comunes para acelerar las respuestas"""
        responses = {}
        
        branding = tenant_config.get('branding', {})
        contact_name = branding.get('contactName', 'el candidato')
        
        # Respuestas precomputadas para preguntas frecuentes
        responses.update({
            "quien es": f"{contact_name} es nuestro candidato. Puedo contarte m√°s sobre sus propuestas y logros.",
            "quien eres": f"¬°Hola! Soy el asistente virtual de la campa√±a de {contact_name}. ¬øEn qu√© puedo ayudarte?",
            "propuestas": f"Las propuestas de {contact_name} est√°n enfocadas en mejorar nuestra comunidad. ¬øTe interesa alg√∫n tema espec√≠fico?",
            "apoyar": f"Puedes apoyar a {contact_name} de varias formas: como voluntario, compartiendo informaci√≥n, o participando en eventos.",
            "voluntario": f"¬°Excelente! Como voluntario puedes ayudar con difusi√≥n, eventos y organizaci√≥n. ¬øEn qu√© √°rea te interesa participar?",
            "cita": f"Puedes agendar una cita para conocer m√°s sobre {contact_name} y sus propuestas.",
            "referidos": "El sistema de referidos te permite invitar amigos y familiares a conocer la campa√±a. Cada referido registrado suma puntos.",
            "hola": f"¬°Hola! Soy el asistente virtual de la campa√±a de {contact_name}. ¬øEn qu√© puedo ayudarte?",
            "gracias": f"¬°De nada! Estoy aqu√≠ para ayudarte con cualquier pregunta sobre {contact_name} y la campa√±a."
        })
        
        return responses
    
    def get_fast_intent_classification(self, tenant_id: str, query: str) -> Optional[Dict[str, Any]]:
        """Clasificaci√≥n r√°pida de intenciones usando patrones precargados"""
        tenant_memory = self._tenant_memories.get(tenant_id)
        if not tenant_memory:
            return None
        
        query_lower = query.lower().strip()
        
        # Patrones de intenci√≥n precomputados
        intent_patterns = {
            "saludo_apoyo": ["hola", "hi", "hello", "hey", "buenos d√≠as", "buenas tardes", "buenas noches", "qu√© tal", "que tal", "quien eres", "quien es"],
            "propuestas_campa√±a": ["propuestas", "propuesta", "plan", "planes", "proyecto", "proyectos", "educaci√≥n", "salud", "trabajo"],
            "voluntariado": ["voluntario", "voluntarios", "ayudar", "participar", "colaborar", "trabajar", "unirme"],
            "cita_campa√±a": ["cita", "citas", "agendar", "reuni√≥n", "reuniones", "conocer", "hablar"],
            "referidos": ["referido", "referidos", "invitar", "invitar amigos", "compartir", "recomendar"],
            "agradecimiento": ["gracias", "thank you", "muchas gracias", "te agradezco", "appreciate"],
            "despedida": ["adi√≥s", "adios", "bye", "hasta luego", "nos vemos", "chao"],
            "informaci√≥n_general": ["informaci√≥n", "info", "saber", "conocer", "entender", "explicar"]
        }
        
        # Buscar coincidencias de intenci√≥n
        for intent, patterns in intent_patterns.items():
            for pattern in patterns:
                if pattern in query_lower:
                    confidence = 0.9 if pattern in query_lower else 0.7
                    logger.info(f"üöÄ Intenci√≥n r√°pida encontrada: '{intent}' para patr√≥n: '{pattern}' en consulta: '{query_lower}'")
                    return {
                        "category": intent,
                        "confidence": confidence,
                        "source": "memory_patterns"
                    }
        
        return None
    
    def _generate_quick_response(self, consciousness: TenantConsciousness, query: str) -> str:
        """Genera una respuesta r√°pida basada en la conciencia del usuario"""
        branding = consciousness.tenant_config.get('branding', {})
        contact_name = branding.get('contactName', 'el candidato')
        
        # Respuesta gen√©rica r√°pida
        return f"Bas√°ndome en la informaci√≥n de {contact_name}, puedo ayudarte con eso. ¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico?"
    
    def _cleanup_expired_consciousness(self):
        """Limpia las conciencias de usuario expiradas"""
        current_time = time.time()
        expired_keys = []
        
        for key, consciousness in self._user_consciousness.items():
            if current_time - consciousness.last_updated > self._consciousness_ttl:
                expired_keys.append(key)
        
        for key in expired_keys:
            del self._user_consciousness[key]
            logger.info(f"üß† Conciencia expirada eliminada: {key}")
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de la memoria"""
        return {
            'tenant_memories': len(self._tenant_memories),
            'user_consciousness': len(self._user_consciousness),
            'memory_ttl': self._memory_ttl,
            'consciousness_ttl': self._consciousness_ttl
        }

# Instancia global del servicio
tenant_memory_service = TenantMemoryService()
