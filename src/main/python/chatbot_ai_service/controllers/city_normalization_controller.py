"""
Controlador para normalizaci√≥n de ciudades
=========================================

Maneja la normalizaci√≥n de ciudades usando fuentes externas y IA
"""

from fastapi import APIRouter, HTTPException
from typing import Dict, List, Any
import aiohttp
import asyncio
import json
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1", tags=["city-normalization"])

@router.post("/normalize-city")
async def normalize_city(request: Dict[str, Any]):
    """
    Normaliza una ciudad y detecta su departamento/estado y pa√≠s usando IA y fuentes externas REALES
    """
    try:
        city_input = request.get("city", "").strip()
        if not city_input:
            raise HTTPException(status_code=400, detail="City parameter is required")
        
        logger.info(f"üåç Normalizando ciudad: '{city_input}'")
        
        # Estrategia h√≠brida: IA + fuentes externas + validaci√≥n cruzada
        normalized_result = await normalize_city_hybrid_approach(city_input)
        
        result = {
            "city": normalized_result["city"],
            "state": normalized_result.get("state"),
            "country": normalized_result.get("country", "Colombia"),
            "confidence": normalized_result.get("confidence", 0.8),
            "source": normalized_result.get("source", "hybrid")
        }
        
        # Si necesita aclaraci√≥n, incluir la pregunta y opciones
        if normalized_result.get("source") == "clarification_needed":
            result["clarification_question"] = normalized_result.get("clarification_question")
            result["options"] = normalized_result.get("options")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error normalizando ciudad: {e}")
        raise HTTPException(status_code=500, detail=f"Error normalizando ciudad: {str(e)}")

@router.post("/resolve-city-ambiguity")
async def resolve_city_ambiguity(request: Dict[str, Any]):
    """
    Resuelve la ambig√ºedad de ciudad cuando el usuario selecciona una opci√≥n
    """
    try:
        city_input = request.get("city", "").strip()
        selected_option = request.get("selected_option", 0)
        options = request.get("options", [])
        
        if not city_input or not options or selected_option < 1 or selected_option > len(options):
            raise HTTPException(status_code=400, detail="Par√°metros inv√°lidos")
        
        # Obtener la opci√≥n seleccionada
        selected_city = options[selected_option - 1]
        
        return {
            "city": selected_city.get("city", city_input),
            "state": selected_city.get("state"),
            "country": selected_city.get("country"),
            "confidence": 0.9,  # Alta confianza porque el usuario la confirm√≥
            "source": "user_confirmed"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error resolviendo ambig√ºedad de ciudad: {e}")
        raise HTTPException(status_code=500, detail=f"Error resolviendo ambig√ºedad: {str(e)}")

@router.post("/interpret-city-selection")
async def interpret_city_selection(request: Dict[str, Any]):
    """
    Interpreta la selecci√≥n de ciudad del usuario en lenguaje natural
    """
    try:
        user_response = request.get("user_response", "").strip()
        options = request.get("options", [])
        city_input = request.get("city", "").strip()
        
        if not user_response or not options or not city_input:
            raise HTTPException(status_code=400, detail="Par√°metros requeridos: user_response, options, city")
        
        logger.info(f"ü§ñ Interpretando selecci√≥n natural: '{user_response}' para ciudad '{city_input}'")
        
        # Usar IA para interpretar la respuesta del usuario
        selected_option = await interpret_natural_selection(user_response, options, city_input)
        
        if selected_option is None:
            return {
                "success": False,
                "message": "No pude entender tu respuesta. Por favor, responde con el n√∫mero de la opci√≥n (1, 2, 3) o menciona el pa√≠s o regi√≥n espec√≠fica.",
                "suggestions": [f"{i+1}. {opt.get('full_location', '')}" for i, opt in enumerate(options)]
            }
        
        return {
            "success": True,
            "selected_option": selected_option,
            "city": options[selected_option-1].get("city"),
            "state": options[selected_option-1].get("state"),
            "country": options[selected_option-1].get("country"),
            "confidence": 0.9
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error interpretando selecci√≥n de ciudad: {e}")
        raise HTTPException(status_code=500, detail=f"Error interpretando selecci√≥n: {str(e)}")

async def normalize_city_hybrid_approach(city_input: str) -> Dict[str, Any]:
    """
    Enfoque h√≠brido: usa IA para determinar estrategia de b√∫squeda, luego consulta fuentes externas
    """
    try:
        # 0. PRIMERO: Verificar sobrenombres/apodos conocidos (m√°s r√°pido y confiable)
        nickname_result = check_city_nicknames(city_input)
        if nickname_result:
            logger.info(f"üè∑Ô∏è Sobrenombre detectado: '{city_input}' -> {nickname_result}")
            return {
                "city": nickname_result["city"],
                "state": nickname_result["state"],
                "country": nickname_result["country"],
                "confidence": 0.95,  # Alta confianza para sobrenombres conocidos
                "source": "nickname"
            }
        
        # 1. Usar IA para determinar si la ciudad es probablemente de Colombia
        country_hint = await determine_country_hint_with_ai(city_input)
        logger.info(f"ü§ñ IA sugiere buscar primero en: {country_hint}")
        
        # 2. Consultar fuentes externas con estrategia inteligente
        external_tasks = [
            query_nominatim_geocoding(city_input, country_hint),
            query_geonames_api(city_input, country_hint),
            query_google_geocoding(city_input, country_hint)  # Si est√° disponible
        ]
        
        external_results = await asyncio.gather(*external_tasks, return_exceptions=True)
        
        # 3. Procesar resultados de Nominatim (puede devolver m√∫ltiples)
        valid_results = []
        for result in external_results:
            if isinstance(result, list):
                # Nominatim devolvi√≥ m√∫ltiples resultados - usar filtro m√°s permisivo para ambig√ºedad
                if country_hint == "ambiguous":
                    valid_results.extend([r for r in result if r.get("confidence", 0) > 0.1])
                else:
                    valid_results.extend([r for r in result if r.get("confidence", 0) > 0.5])
            elif isinstance(result, dict):
                if country_hint == "ambiguous" and result.get("confidence", 0) > 0.1:
                    valid_results.append(result)
                elif result.get("confidence", 0) > 0.5:
                    valid_results.append(result)
        
        # 3.5. Eliminar duplicados bas√°ndose en ciudad, estado y pa√≠s
        unique_results = []
        seen_locations = set()
        for result in valid_results:
            city = result.get("city", "").strip()
            state = result.get("state", "")
            country = result.get("country", "")
            location_key = f"{city}|{state}|{country}"
            
            if location_key not in seen_locations:
                seen_locations.add(location_key)
                unique_results.append(result)
        
        # 4. Verificar si hay ambig√ºedad en los resultados √∫nicos
        logger.info(f"üîç Verificando ambig√ºedad: {len(unique_results)} resultados √∫nicos")
        for i, result in enumerate(unique_results):
            logger.info(f"   Resultado {i+1}: {result.get('city')}, {result.get('state')}, {result.get('country')}")
        
        if len(unique_results) > 1 and has_ambiguous_cities(unique_results):
            logger.info(f"üîç Ambiguidad detectada para '{city_input}'")
            # Usar IA para generar pregunta de aclaraci√≥n
            clarification_question = await generate_clarification_question(city_input, unique_results)
            return {
                "city": city_input,
                "state": None,
                "country": None,
                "confidence": 0.0,
                "source": "clarification_needed",
                "clarification_question": clarification_question,
                "options": extract_city_options(unique_results)
            }
        
        # 5. Usar IA para an√°lisis y validaci√≥n cruzada
        ai_analysis = await analyze_external_results_with_ai(city_input, unique_results)
        
        # 6. Seleccionar el mejor resultado basado en confianza y consenso
        best_result = select_best_result(ai_analysis, unique_results)
        
        return best_result
        
    except Exception as e:
        logger.error(f"Error en enfoque h√≠brido: {e}")
        # Fallback: solo IA
        return await normalize_city_with_ai_only(city_input)

async def determine_country_hint_with_ai(city_input: str) -> str:
    """
    Usa IA para determinar si una ciudad es probablemente de Colombia o de otro pa√≠s
    """
    try:
        # Primero verificar patrones comunes que indican ambig√ºedad
        city_lower = city_input.lower().strip()
        
        # Ciudades conocidas que existen en m√∫ltiples pa√≠ses
        ambiguous_cities = [
            "madrid", "paris", "london", "berlin", "rome", "milan", "barcelona", 
            "valencia", "sevilla", "zaragoza", "m√°laga", "murcia", "palma",
            "c√≥rdoba", "valladolid", "vigo", "gij√≥n", "lhospitalet", "vitoria",
            "granada", "elche", "oviedo", "santa cruz", "badalona", "cartagena",
            "terrassa", "jerez", "sabadell", "m√≥stoles", "alcal√°", "pamplona",
            "le√≥n", "castell√≥n", "almer√≠a", "burgos", "salamanca", "huelva",
            "albacete", "logro√±o", "badajoz", "san sebasti√°n", "l√©rida", "c√°ceres",
            "santander", "pontevedra", "girona", "lugo", "ourense", "ceuta",
            "melilla", "palencia", "√°vila", "segovia", "soria", "guadalajara",
            "cuenca", "toledo", "ciudad real", "ja√©n", "c√°diz", "huesca",
            "teruel", "zamora", "le√≥n", "pontevedra", "ourense", "lugo"
        ]
        
        # Si es una ciudad ambigua sin contexto de pa√≠s, marcar como ambigua
        city_name = extract_city_name_from_input(city_input).lower().strip()
        if city_name in ambiguous_cities:
            # Verificar si hay contexto de pa√≠s
            has_country_context = any(word in city_lower for word in [
                "en espa√±a", "en colombia", "en m√©xico", "en argentina", 
                "en chile", "en per√∫", "en venezuela", "espa√±a", "colombia",
                "m√©xico", "mexico", "argentina", "chile", "per√∫", "peru", "venezuela"
            ])
            
            if not has_country_context:
                logger.info(f"üîç Ciudad ambigua detectada: '{city_name}' sin contexto de pa√≠s")
                return "ambiguous"
        
        # Importar el servicio de IA
        from chatbot_ai_service.services.ai_service import AIService
        ai_service = AIService()
        
        # Crear prompt para determinar el pa√≠s
        prompt = f"""
        Analiza el siguiente texto y determina si menciona un pa√≠s espec√≠fico:
        
        Texto: "{city_input}"
        
        Busca indicadores de pa√≠s como:
        - "en [pa√≠s]" (ej: "en espa√±a", "en colombia", "en m√©xico")
        - "de [pa√≠s]" (ej: "de espa√±a", "de colombia")
        - Nombres de pa√≠ses directamente (ej: "espa√±a", "colombia", "m√©xico")
        - Referencias geogr√°ficas (ej: "europa", "am√©rica latina")
        
        IMPORTANTE: Si el texto contiene "en [ciudad]" sin especificar pa√≠s (ej: "en madrid", "en paris"), 
        responde "ambiguous" porque puede referirse a m√∫ltiples pa√≠ses.
        
        Responde SOLO con el nombre del pa√≠s detectado en min√∫sculas, "ambiguous" si hay ambig√ºedad, o "colombia" si no detectas ning√∫n pa√≠s espec√≠fico.
        
        Ejemplos:
        - "en espa√±a, en madrid" -> "espa√±a"
        - "en madrid" -> "ambiguous" (puede ser Espa√±a o Colombia)
        - "madrid" -> "ambiguous" (puede ser Espa√±a o Colombia)
        - "bogot√°" -> "colombia"
        - "en m√©xico, ciudad de m√©xico" -> "m√©xico"
        - "europa" -> "ambiguous"
        """
        
        # Usar el servicio de IA para determinar el pa√≠s
        response = await ai_service.generate_response(prompt, "system")
        
        if response and response.strip().lower() in ["espa√±a", "spain", "colombia", "m√©xico", "mexico", "argentina", "chile", "per√∫", "peru", "venezuela", "ambiguous"]:
            country = response.strip().lower()
            logger.info(f"ü§ñ IA detect√≥ pa√≠s: {country} para '{city_input}'")
            return country
        else:
            logger.warn(f"ü§ñ IA no pudo determinar pa√≠s claramente: '{response}' para '{city_input}'")
            # No asumir Colombia por defecto, marcar como ambiguo para buscar en todos los pa√≠ses
            return "ambiguous"
        
    except Exception as e:
        logger.error(f"Error determinando pa√≠s con IA: {e}")
        return "ambiguous"  # Marcar como ambiguo para buscar en todos los pa√≠ses

def extract_city_name_from_input(city_input: str) -> str:
    """
    Extrae el nombre de la ciudad espec√≠fica del input del usuario
    """
    try:
        # Casos especiales para frases como "en espa√±a, en madrid"
        if "," in city_input:
            parts = [part.strip() for part in city_input.split(",")]
            # Buscar la parte que parece ser una ciudad espec√≠fica
            for part in reversed(parts):
                clean_part = part.lower().strip()
                # Si la parte contiene "en" seguido de una ciudad espec√≠fica
                if clean_part.startswith("en "):
                    city_name = clean_part[3:].strip()  # Remover "en "
                    # Verificar que no sea un pa√≠s
                    if city_name not in ["espa√±a", "spain", "colombia", "m√©xico", "mexico", "argentina", "chile", "per√∫", "peru", "venezuela"]:
                        return city_name.title()
                # Si no contiene palabras de pa√≠s, es probablemente la ciudad
                elif not any(word in clean_part for word in ["en", "de", "del", "la", "el", "espa√±a", "spain", "colombia", "m√©xico", "mexico"]):
                    return part.strip()
        
        # Si no hay comas, buscar patrones como "en [pa√≠s], en [ciudad]"
        if "en " in city_input.lower():
            # Dividir por "en" y tomar la √∫ltima parte
            parts = city_input.lower().split("en ")
            if len(parts) > 1:
                last_part = parts[-1].strip()
                # Si la √∫ltima parte no contiene palabras de pa√≠s, es probablemente la ciudad
                if not any(word in last_part for word in ["espa√±a", "spain", "colombia", "m√©xico", "mexico"]):
                    return last_part.title()
        
        # Si no hay comas, devolver el input completo
        return city_input.strip()
        
    except Exception as e:
        logger.error(f"Error extrayendo nombre de ciudad: {e}")
        return city_input.strip()

async def query_nominatim_geocoding(city_input: str, country_hint: str = "colombia") -> List[Dict[str, Any]]:
    """
    Consulta la API de Nominatim (OpenStreetMap) para obtener informaci√≥n geogr√°fica
    Usa la sugerencia de pa√≠s de la IA para priorizar la b√∫squeda
    """
    try:
        url = "https://nominatim.openstreetmap.org/search"
        headers = {
            "User-Agent": "PoliticalReferralsBot/1.0 (contact@example.com)"
        }
        
        # Mapear pa√≠ses a c√≥digos de pa√≠s
        country_codes = {
            "espa√±a": "es",
            "spain": "es", 
            "colombia": "co",
            "m√©xico": "mx",
            "mexico": "mx",
            "argentina": "ar",
            "chile": "cl",
            "per√∫": "pe",
            "peru": "pe",
            "venezuela": "ve",
            "ambiguous": None
        }
        
        # Estrategia de b√∫squeda basada en la sugerencia de la IA
        search_strategies = []
        
        if country_hint == "ambiguous":
            # Si hay ambig√ºedad, buscar en todos los pa√≠ses sin filtros
            logger.info(f"üîç Ambiguidad detectada para '{city_input}', buscando en todos los pa√≠ses")
            
            # Extraer la ciudad espec√≠fica del input
            city_name = extract_city_name_from_input(city_input)
            logger.info(f"üîç Ciudad extra√≠da: '{city_name}' de input: '{city_input}'")
            
            # Buscar sin filtros de pa√≠s para obtener todas las opciones
            search_strategies.append({
                "q": city_name,
                "priority": "ambiguous_all",
                "limit": 10
            })
            
            # Tambi√©n buscar con el input completo
            search_strategies.append({
                "q": city_input,
                "priority": "ambiguous_complete",
                "limit": 5
            })
            
        elif country_hint in country_codes and country_codes[country_hint]:
            # Extraer la ciudad espec√≠fica del input para b√∫squedas m√°s precisas
            city_name = extract_city_name_from_input(city_input)
            logger.info(f"üîç Ciudad extra√≠da: '{city_name}' de input: '{city_input}'")
            
            # Priorizar el pa√≠s sugerido por la IA con la ciudad espec√≠fica
            search_strategies.append({
                "q": f"{city_name}, {country_hint.title()}",
                "countrycodes": country_codes[country_hint],
                "priority": f"{country_hint}_first",
                "limit": 5
            })
            
            # Tambi√©n buscar con el input completo por si contiene informaci√≥n adicional
            search_strategies.append({
                "q": f"{city_input}, {country_hint.title()}",
                "countrycodes": country_codes[country_hint],
                "priority": f"{country_hint}_complete",
                "limit": 3
            })
            
            # Siempre incluir Colombia como segunda opci√≥n si no es el pa√≠s sugerido
            if country_hint != "colombia":
                search_strategies.append({
                    "q": f"{city_input}, Colombia",
                    "countrycodes": "co",
                    "priority": "colombia_second",
                    "limit": 3
                })
            
            # Buscar en otros pa√≠ses si no hay resultados espec√≠ficos
            search_strategies.append({
                "q": city_input,
                "countrycodes": "us,mx,ar,es,ve,pe,ec,bo,py,uy,cl,cr,pa,gt,hn,sv,ni,cu,do,pr,br",
                "priority": "other_countries",
                "limit": 3
            })
        
        all_results = []
        
        async with aiohttp.ClientSession() as session:
            for strategy in search_strategies:
                params = {
                    "q": strategy["q"],
                    "format": "json",
                    "limit": strategy["limit"],
                    "addressdetails": 1
                }
                
                # Solo agregar countrycodes si est√° definido
                if "countrycodes" in strategy and strategy["countrycodes"]:
                    params["countrycodes"] = strategy["countrycodes"]
                
                try:
                    async with session.get(url, params=params, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            
                            if data and len(data) > 0:
                                # Analizar todos los resultados y agregarlos a la lista
                                results = analyze_nominatim_results_multiple(data, strategy["priority"], city_input)
                                all_results.extend(results)
                                logger.info(f"üåç Nominatim ({strategy['priority']}) encontr√≥ {len(results)} resultados")
                
                except Exception as e:
                    logger.error(f"Error en estrategia {strategy['priority']}: {e}")
                    continue
        
        # Si encontramos m√∫ltiples resultados, devolverlos todos para detecci√≥n de ambig√ºedad
        if len(all_results) > 1:
            return all_results
        elif len(all_results) == 1:
            return all_results[0]
        else:
            return {"confidence": 0.0}
        
    except Exception as e:
        logger.error(f"Error consultando Nominatim: {e}")
        return {"confidence": 0.0}

def analyze_nominatim_results_multiple(data: List[Dict[str, Any]], search_priority: str, city_input: str = "") -> List[Dict[str, Any]]:
    """
    Analiza m√∫ltiples resultados de Nominatim y devuelve una lista de resultados v√°lidos
    """
    try:
        results = []
        
        for result in data:
            address = result.get("address", {})
            
            # Extraer informaci√≥n
            city = (address.get("city") or 
                   address.get("town") or 
                   address.get("village") or 
                   address.get("hamlet") or
                   address.get("suburb"))
            
            state = (address.get("state") or 
                    address.get("province") or 
                    address.get("region") or
                    address.get("county"))
            
            country = address.get("country")
            
            if not city:
                continue
            
            # Mapear regi√≥n a departamento si es Colombia
            if country == "Colombia" and state:
                state = map_colombian_region_to_department(state)
            
            # Calcular score basado en relevancia
            score = 0
            
            # Importancia del lugar (0-1)
            importance = result.get("importance", 0)
            score += importance * 0.4
            
            # Preferencia por Colombia si estamos en b√∫squeda espec√≠fica
            if search_priority == "colombia_first" and country == "Colombia":
                score += 0.3
            elif search_priority == "other_countries" and country != "Colombia":
                score += 0.3
            
            # Preferencia por lugares con estado/departamento definido
            if state:
                score += 0.2
            
            # Preferencia por ciudades sobre pueblos
            if any(term in address for term in ["city", "town"]):
                score += 0.1
            
            # Solo agregar si tiene suficiente confianza (reducido para permitir m√°s opciones)
            logger.info(f"   üìä Score para {city}, {state}, {country}: {score:.3f}")
            
            # Filtrar solo ciudades que coincidan con el nombre buscado
            # Extraer la ciudad del input original
            extracted_city = extract_city_name_from_input(city_input).lower().strip()
            city_matches = city.lower().strip() == extracted_city
            
            # Tambi√©n verificar coincidencia directa si el input es simple
            if not city_matches and len(city_input.split()) == 1:
                city_matches = city.lower().strip() == city_input.lower().strip()
            
            if score > 0.1 and city_matches:
                city_result = {
                    "city": city,
                    "state": state,
                    "country": country or "Colombia",
                    "confidence": min(score, 0.9),
                    "source": "nominatim"
                }
                results.append(city_result)
                logger.info(f"   ‚úÖ Agregado: {city}, {state}, {country}")
            else:
                if not city_matches:
                    logger.info(f"   ‚ùå Rechazado por nombre no coincidente: {city}, {state}, {country}")
                else:
                    logger.info(f"   ‚ùå Rechazado por score bajo: {city}, {state}, {country}")
        
        return results
        
    except Exception as e:
        logger.error(f"Error analizando m√∫ltiples resultados Nominatim: {e}")
        return []

def map_colombian_region_to_department(state: str) -> str:
    """
    Mapea regiones administrativas colombianas a departamentos
    """
    if not state:
        return state
    
    state_lower = state.lower().strip()
    
    # Mapeo de regiones administrativas a departamentos
    region_mapping = {
        # Regi√≥n Administrativa y de Planificaci√≥n (RAP) Central
        "rap (especial) central": "Cundinamarca",
        "rap central": "Cundinamarca",
        "regi√≥n central": "Cundinamarca",
        "central": "Cundinamarca",
        
        # RAP Caribe
        "rap (especial) caribe": "Atl√°ntico",
        "rap caribe": "Atl√°ntico",
        "regi√≥n caribe": "Atl√°ntico",
        "caribe": "Atl√°ntico",
        
        # RAP Pac√≠fico
        "rap (especial) pac√≠fico": "Valle del Cauca",
        "rap pac√≠fico": "Valle del Cauca",
        "regi√≥n pac√≠fico": "Valle del Cauca",
        "pac√≠fico": "Valle del Cauca",
        
        # RAP Eje Cafetero
        "rap (especial) eje cafetero": "Risaralda",
        "rap eje cafetero": "Risaralda",
        "regi√≥n eje cafetero": "Risaralda",
        "eje cafetero": "Risaralda",
        
        # RAP Orinoqu√≠a
        "rap (especial) orinoqu√≠a": "Meta",
        "rap orinoqu√≠a": "Meta",
        "regi√≥n orinoqu√≠a": "Meta",
        "orinoqu√≠a": "Meta",
        
        # RAP Amazon√≠a
        "rap (especial) amazon√≠a": "Caquet√°",
        "rap amazon√≠a": "Caquet√°",
        "regi√≥n amazon√≠a": "Caquet√°",
        "amazon√≠a": "Caquet√°",
        
        # Casos espec√≠ficos conocidos
        "cundinamarca": "Cundinamarca",
        "antioquia": "Antioquia",
        "valle del cauca": "Valle del Cauca",
        "atl√°ntico": "Atl√°ntico",
        "bol√≠var": "Bol√≠var",
        "santander": "Santander",
        "norte de santander": "Norte de Santander",
        "tolima": "Tolima",
        "risaralda": "Risaralda",
        "magdalena": "Magdalena",
        "cesar": "Cesar",
        "c√≥rdoba": "C√≥rdoba",
        "huila": "Huila",
        "meta": "Meta",
        "boyac√°": "Boyac√°",
        "caquet√°": "Caquet√°",
        "cauca": "Cauca",
        "choc√≥": "Choc√≥",
        "la guajira": "La Guajira",
        "san andr√©s y providencia": "San Andr√©s y Providencia"
    }
    
    # Buscar coincidencia exacta
    if state_lower in region_mapping:
        mapped_department = region_mapping[state_lower]
        logger.info(f"üó∫Ô∏è Mapeando regi√≥n '{state}' -> departamento '{mapped_department}'")
        return mapped_department
    
    # Buscar coincidencia parcial
    for region, department in region_mapping.items():
        if region in state_lower or state_lower in region:
            logger.info(f"üó∫Ô∏è Mapeando regi√≥n (parcial) '{state}' -> departamento '{department}'")
            return department
    
    # Si no se encuentra mapeo, devolver el estado original
    return state

async def query_geonames_api(city_input: str, country_hint: str = "colombia") -> Dict[str, Any]:
    """
    Consulta la API de GeoNames para obtener informaci√≥n geogr√°fica
    """
    try:
        url = "http://api.geonames.org/searchJSON"
        
        params = {
            "q": city_input,
            "maxRows": 3,
            "username": "demo",  # Usar demo para pruebas
            "country": "CO",  # Buscar primero en Colombia
            "featureClass": "P",  # Solo lugares poblados
            "orderby": "population"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    geonames = data.get("geonames", [])
                    
                    if geonames:
                        result = geonames[0]  # Tomar el m√°s poblado
                        
                        return {
                            "city": result.get("name", ""),
                            "state": result.get("adminName1", ""),
                            "country": result.get("countryName", "Colombia"),
                            "confidence": 0.7 if result.get("population", 0) > 1000 else 0.5,
                            "source": "geonames"
                        }
        
        return {"confidence": 0.0}
        
    except Exception as e:
        logger.error(f"Error consultando GeoNames: {e}")
        return {"confidence": 0.0}

async def query_google_geocoding(city_input: str, country_hint: str = "colombia") -> Dict[str, Any]:
    """
    Consulta la API de Google Geocoding (si est√° disponible)
    """
    try:
        # Por ahora retornar sin resultados ya que requiere API key
        # En el futuro se puede implementar si se tiene acceso
        return {"confidence": 0.0}
        
    except Exception as e:
        logger.error(f"Error consultando Google Geocoding: {e}")
        return {"confidence": 0.0}

def has_ambiguous_cities(results: List[Dict[str, Any]]) -> bool:
    """
    Verifica si hay ciudades ambiguas (mismo nombre, diferentes ubicaciones)
    """
    if len(results) < 2:
        return False
    
    # Crear un conjunto de ubicaciones √∫nicas
    unique_locations = set()
    for result in results:
        city = result.get("city", "").strip()
        state = result.get("state", "")
        country = result.get("country", "")
        location_key = f"{city}|{state}|{country}"
        unique_locations.add(location_key)
    
    # Si hay m√°s de una ubicaci√≥n √∫nica, hay ambig√ºedad
    logger.info(f"üîç Ubicaciones √∫nicas encontradas: {len(unique_locations)}")
    for location in unique_locations:
        logger.info(f"   üìç {location}")
    
    return len(unique_locations) > 1

def extract_city_options(results: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    Extrae las opciones de ciudades para mostrar al usuario
    """
    options = []
    for i, result in enumerate(results, 1):
        city = result.get("city", "")
        state = result.get("state", "")
        country = result.get("country", "")
        
        option = {
            "id": i,
            "city": city,
            "state": state,
            "country": country,
            "full_location": f"{city}, {state}, {country}" if state and country else city
        }
        options.append(option)
    
    return options

async def generate_clarification_question(city_input: str, results: List[Dict[str, Any]]) -> str:
    """
    Genera una pregunta de aclaraci√≥n usando IA cuando hay ciudades ambiguas
    """
    try:
        # Construir lista de opciones para la IA
        options_text = ""
        for i, result in enumerate(results, 1):
            city = result.get("city", "")
            state = result.get("state", "")
            country = result.get("country", "")
            options_text += f"{i}. {city}, {state}, {country}\n"
        
        # Generar pregunta simple por ahora (sin IA)
        question = f"Encontr√© varias ciudades llamadas {city_input}. ¬øPodr√≠as confirmar cu√°l es la correcta?\n\n{options_text}\nPor favor responde con el n√∫mero de la opci√≥n que corresponde a tu ubicaci√≥n."
        
        logger.info(f"ü§ñ IA gener√≥ pregunta de aclaraci√≥n: {question}")
        return question
        
    except Exception as e:
        logger.error(f"Error generando pregunta de aclaraci√≥n: {e}")
        # Fallback: pregunta simple
        options_text = ""
        for i, result in enumerate(results, 1):
            city = result.get("city", "")
            state = result.get("state", "")
            country = result.get("country", "")
            options_text += f"{i}. {city}, {state}, {country}\n"
        
        return f"Encontr√© varias ciudades llamadas {city_input}. ¬øPodr√≠as confirmar cu√°l es la correcta?\n\n{options_text}\nPor favor responde con el n√∫mero de la opci√≥n que corresponde a tu ubicaci√≥n."

async def analyze_external_results_with_ai(city_input: str, external_results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Usa IA para analizar y validar los resultados de fuentes externas
    """
    try:
        if not external_results:
            return await normalize_city_with_ai_only(city_input)
        
        # Por ahora, usar el mejor resultado externo
        if external_results:
            best_external = max(external_results, key=lambda x: x.get("confidence", 0))
            return best_external
        
        return {
            "city": city_input,
            "state": None,
            "country": "Colombia",
            "confidence": 0.3,
            "source": "fallback"
        }
        
    except Exception as e:
        logger.error(f"Error en an√°lisis con IA: {e}")
        return {
            "city": city_input,
            "state": None,
            "country": "Colombia",
            "confidence": 0.1,
            "source": "fallback"
        }

async def normalize_city_with_ai_only(city_input: str) -> Dict[str, Any]:
    """
    Normaliza ciudad usando solo IA (fallback cuando no hay fuentes externas)
    """
    try:
        # Por ahora, fallback simple
        return {
            "city": city_input,
            "state": None,
            "country": "Colombia",
            "confidence": 0.1,
            "source": "ai_only"
        }
    except Exception as e:
        logger.error(f"Error con IA: {e}")
        return {
            "city": city_input,
            "state": None,
            "country": "Colombia",
            "confidence": 0.1,
            "source": "ai_error"
        }

async def interpret_natural_selection(user_response: str, options: List[Dict], city_input: str) -> int:
    """
    Interpreta la respuesta del usuario en lenguaje natural para seleccionar una opci√≥n de ciudad
    """
    try:
        # Importar el servicio de IA
        from chatbot_ai_service.services.ai_service import AIService
        ai_service = AIService()
        
        # Crear el prompt para la IA
        options_text = "\n".join([f"{i+1}. {opt.get('full_location', '')}" for i, opt in enumerate(options)])
        
        prompt = f"""
        El usuario escribi√≥ la ciudad "{city_input}" y le mostr√© estas opciones:
        
        {options_text}
        
        El usuario respondi√≥: "{user_response}"
        
        PRIMERO: Verifica si la respuesta del usuario es una PREGUNTA INFORMATIVA que NO est√° relacionada con la selecci√≥n de ciudad.
        
        PREGUNTAS INFORMATIVAS (NO son selecciones de ciudad):
        - Preguntas sobre personas: "¬øqui√©n es...?", "¬øqu√© hace...?", "¬øc√≥mo es...?"
        - Preguntas sobre el proceso: "¬øpor qu√© me preguntas esto?", "¬øpara qu√© necesitas mi ciudad?"
        - Preguntas generales: "¬øqu√© es esto?", "¬øc√≥mo funciona?", "¬øpuedo cambiar mi respuesta?"
        - Preguntas sobre el sistema: "¬øeres un bot?", "¬øhay un humano disponible?"
        
        Si la respuesta es una PREGUNTA INFORMATIVA, responde "NO_ES_SELECCION".
        
        SEGUNDO: Si NO es una pregunta informativa, analiza si es una selecci√≥n de ciudad v√°lida:
        
        FORMAS DE RESPUESTA V√ÅLIDAS:
        - N√∫meros: "1", "2", "3", "la primera", "la segunda", "la √∫ltima"
        - Pa√≠ses: "Colombia", "Espa√±a", "Estados Unidos", "M√©xico", "Argentina", etc.
        - Regiones/Estados: "Cundinamarca", "Madrid", "Iowa", "California", "Buenos Aires", etc.
        - Referencias geogr√°ficas: "europa", "am√©rica", "latinoam√©rica", "norteam√©rica"
        - Referencias de ubicaci√≥n: "en espa√±a", "de colombia", "en europa", "en am√©rica"
        - Referencias de distancia: "la m√°s cercana", "la m√°s lejana"
        - Referencias de tama√±o: "la m√°s grande", "la capital", "la principal"
        
        REGLAS DE INTERPRETACI√ìN:
        1. Si menciona un pa√≠s, busca la opci√≥n que contenga ese pa√≠s
        2. Si menciona una regi√≥n/estado, busca la opci√≥n que contenga esa regi√≥n
        3. Si menciona "europa", busca opciones de pa√≠ses europeos (Espa√±a, Francia, etc.)
        4. Si menciona "am√©rica" o "latinoam√©rica", busca opciones de pa√≠ses americanos
        5. Si menciona "la primera", "la segunda", etc., usa el n√∫mero correspondiente
        6. Si menciona "la m√°s cercana" o "la m√°s grande", usa tu criterio geogr√°fico
        
        Responde SOLO con:
        - "NO_ES_SELECCION" si es una pregunta informativa
        - El n√∫mero de la opci√≥n (1, 2, o 3) si es una selecci√≥n v√°lida
        - "NO_CLARO" si no puedes determinar qu√© es
        
        Ejemplos de interpretaci√≥n:
        - "¬øqui√©n es el candidato?" -> NO_ES_SELECCION
        - "¬øpor qu√© me preguntas esto?" -> NO_ES_SELECCION
        - "1" -> 1
        - "la primera" -> 1
        - "Colombia" -> 1 (si la opci√≥n 1 es de Colombia)
        - "Espa√±a" -> 2 (si la opci√≥n 2 es de Espa√±a)
        - "en espa√±a" -> 2 (si la opci√≥n 2 es de Espa√±a)
        - "europa" -> 2 (si la opci√≥n 2 es de Espa√±a/Europa)
        - "Madrid" -> 2 (si la opci√≥n 2 es de Madrid)
        - "Estados Unidos" -> 3 (si la opci√≥n 3 es de Estados Unidos)
        - "am√©rica" -> 3 (si la opci√≥n 3 es de Am√©rica)
        - "la m√°s grande" -> 3 (si la opci√≥n 3 es la ciudad m√°s grande)
        - "no s√©" -> NO_CLARO
        """
        
        # Usar el servicio de IA para interpretar
        response = await ai_service.generate_response(prompt, "system")
        
        if response:
            response = response.strip()
            
            # Si la IA detecta que NO es una selecci√≥n de ciudad
            if response == "NO_ES_SELECCION":
                logger.info(f"üîç IA detect√≥ que '{user_response}' NO es una selecci√≥n de ciudad")
                return None
            
            # Si es un n√∫mero v√°lido
            if response.isdigit():
                option_num = int(response)
                if 1 <= option_num <= len(options):
                    logger.info(f"‚úÖ IA interpret√≥ '{user_response}' como opci√≥n {option_num}")
                    return option_num
        
        logger.warn(f"‚ùå IA no pudo interpretar claramente: '{user_response}' -> '{response}'")
        return None
        
    except Exception as e:
        logger.error(f"Error interpretando selecci√≥n natural: {e}")
        return None

def select_best_result(ai_analysis: Dict[str, Any], external_results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Selecciona el mejor resultado basado en an√°lisis de IA y resultados externos
    """
    try:
        # Si tenemos an√°lisis de IA con buena confianza, usarlo
        if ai_analysis.get("confidence", 0) > 0.7:
            logger.info(f"üéØ Usando resultado de IA: {ai_analysis}")
            return ai_analysis
        
        # Si no, usar el mejor resultado externo
        if external_results:
            best_external = max(external_results, key=lambda x: x.get("confidence", 0))
            if best_external.get("confidence", 0) > 0.5:
                logger.info(f"üåê Usando mejor resultado externo: {best_external}")
                return best_external
        
        # Fallback: usar an√°lisis de IA aunque tenga baja confianza
        if ai_analysis:
            logger.info(f"ü§ñ Usando an√°lisis de IA (baja confianza): {ai_analysis}")
            return ai_analysis
        
        # √öltimo recurso
        return {
            "city": "Ciudad no encontrada",
            "state": None,
            "country": "Colombia",
            "confidence": 0.1,
            "source": "fallback_final"
        }
        
    except Exception as e:
        logger.error(f"Error seleccionando mejor resultado: {e}")
        return {
            "city": "Error",
            "state": None,
            "country": "Colombia",
            "confidence": 0.0,
            "source": "error"
        }

def check_city_nicknames(city_input: str) -> Dict[str, Any]:
    """
    Verifica si la entrada es un sobrenombre/apodo conocido de una ciudad
    """
    if not city_input:
        return None
    
    text = city_input.strip().lower()
    
    # Diccionario de apodos/alias ‚Üí (city, state, country)
    nick_map = {
        # Bogot√°
        "la nevera": ("Bogot√°", "Cundinamarca", "Colombia"),
        "bogota": ("Bogot√°", "Cundinamarca", "Colombia"),
        "bogot√°": ("Bogot√°", "Cundinamarca", "Colombia"),
        "atenas suramericana": ("Bogot√°", "Cundinamarca", "Colombia"),
        "la atenas suramericana": ("Bogot√°", "Cundinamarca", "Colombia"),
        "atenas sudamericana": ("Bogot√°", "Cundinamarca", "Colombia"),
        "la atenas sudamericana": ("Bogot√°", "Cundinamarca", "Colombia"),
        
        # Medell√≠n
        "medallo": ("Medell√≠n", "Antioquia", "Colombia"),
        "ciudad de la eterna primavera": ("Medell√≠n", "Antioquia", "Colombia"),
        "la ciudad de la eterna primavera": ("Medell√≠n", "Antioquia", "Colombia"),
        "medellin": ("Medell√≠n", "Antioquia", "Colombia"),
        "medell√≠n": ("Medell√≠n", "Antioquia", "Colombia"),
        
        # Barranquilla
        "la arenosa": ("Barranquilla", "Atl√°ntico", "Colombia"),
        "puerta de oro de colombia": ("Barranquilla", "Atl√°ntico", "Colombia"),
        "la puerta de oro de colombia": ("Barranquilla", "Atl√°ntico", "Colombia"),
        "curramba": ("Barranquilla", "Atl√°ntico", "Colombia"),
        "barranquilla": ("Barranquilla", "Atl√°ntico", "Colombia"),
        
        # Cali
        "la sucursal del cielo": ("Cali", "Valle del Cauca", "Colombia"),
        "sultana del valle": ("Cali", "Valle del Cauca", "Colombia"),
        "cali": ("Cali", "Valle del Cauca", "Colombia"),
        
        # Bucaramanga
        "la ciudad bonita": ("Bucaramanga", "Santander", "Colombia"),
        "ciudad de los parques": ("Bucaramanga", "Santander", "Colombia"),
        "bucaramanga": ("Bucaramanga", "Santander", "Colombia"),
        
        # Buga
        "ciudad se√±ora": ("Buga", "Valle del Cauca", "Colombia"),
        
        # Cartagena
        "ciudad heroica": ("Cartagena", "Bol√≠var", "Colombia"),
        "la ciudad her√≥ica": ("Cartagena", "Bol√≠var", "Colombia"),
        "corralito de piedra": ("Cartagena", "Bol√≠var", "Colombia"),
        
        # Ch√≠a
        "ciudad de la luna": ("Ch√≠a", "Cundinamarca", "Colombia"),
        
        # C√∫cuta
        "perla del norte": ("C√∫cuta", "Norte de Santander", "Colombia"),
        
        # Ibagu√©
        "ciudad musical": ("Ibagu√©", "Tolima", "Colombia"),
        
        # Ipiales
        "ciudad de las nubes verdes": ("Ipiales", "Nari√±o", "Colombia"),
        
        # Monter√≠a
        "perla del sinu": ("Monter√≠a", "C√≥rdoba", "Colombia"),
        "perla del sin√∫": ("Monter√≠a", "C√≥rdoba", "Colombia"),
        
        # Neiva
        "ciudad amable": ("Neiva", "Huila", "Colombia"),
        
        # Pasto
        "ciudad sorpresa": ("Pasto", "Nari√±o", "Colombia"),
        
        # Pereira
        "la querendona": ("Pereira", "Risaralda", "Colombia"),
        
        # Popay√°n
        "ciudad blanca": ("Popay√°n", "Cauca", "Colombia"),
        
        # Santa Marta
        "la perla de am√©rica": ("Santa Marta", "Magdalena", "Colombia"),
        
        # Tunja
        "ciudad universitaria": ("Tunja", "Boyac√°", "Colombia"),
        
        # Villavicencio
        "la puerta del llano": ("Villavicencio", "Meta", "Colombia"),
        
        # Zipaquir√°
        "capital salinera": ("Zipaquir√°", "Cundinamarca", "Colombia"),
    }
    
    # Match exacto por clave completa
    if text in nick_map:
        city, state, country = nick_map[text]
        return {"city": city, "state": state, "country": country}
    
    # B√∫squeda por inclusi√≥n de apodos conocidos en frases completas
    for key, (city, state, country) in nick_map.items():
        if key in text:
            return {"city": city, "state": state, "country": country}
    
    # Regex para capturar patrones frecuentes en frases
    import re
    patterns = [
        r"vivo\s+en\s+la\s+nevera",
        r"estoy\s+en\s+la\s+arenosa",
    ]
    for pat in patterns:
        if re.search(pat, text):
            # Reutilizar nick_map via b√∫squeda por inclusi√≥n
            for key, (city, state, country) in nick_map.items():
                if key in text:
                    return {"city": city, "state": state, "country": country}
    
    return None
