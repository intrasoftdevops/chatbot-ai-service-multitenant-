#!/usr/bin/env python3
"""
Script para probar la integraci√≥n de documentos con URLs reales
"""

import asyncio
import httpx
import json
import sys
from typing import Dict, Any

# Configuraci√≥n
CHATBOT_SERVICE_URL = "http://localhost:8000"
TENANT_ID = "test_dev"

async def test_with_real_url(document_url: str):
    """Prueba la integraci√≥n con una URL real de documentos"""
    
    print(f"üß™ Probando integraci√≥n con URL real: {document_url}")
    print("=" * 70)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        
        # 1. Verificar servicio
        print("\n1Ô∏è‚É£ Verificando servicio...")
        try:
            response = await client.get(f"{CHATBOT_SERVICE_URL}/health")
            if response.status_code == 200:
                print("‚úÖ Servicio funcionando")
            else:
                print(f"‚ùå Servicio no disponible: {response.status_code}")
                return
        except Exception as e:
            print(f"‚ùå Error conectando al servicio: {e}")
            print("üí° Aseg√∫rate de que el servicio est√© ejecut√°ndose en el puerto 8000")
            return
        
        # 2. Cargar documentos
        print(f"\n2Ô∏è‚É£ Cargando documentos desde: {document_url}")
        try:
            load_request = {
                "documentation_bucket_url": document_url
            }
            
            response = await client.post(
                f"{CHATBOT_SERVICE_URL}/api/v1/tenants/{TENANT_ID}/load-documents",
                json=load_request
            )
            
            result = response.json()
            print(f"üìä Status Code: {response.status_code}")
            print(f"üìÑ Respuesta: {json.dumps(result, indent=2, ensure_ascii=False)}")
            
            if result.get("success"):
                print(f"‚úÖ Documentos cargados exitosamente: {result.get('document_count', 'N/A')} documentos")
            else:
                print(f"‚ö†Ô∏è No se pudieron cargar documentos: {result.get('message', 'Error desconocido')}")
                
        except Exception as e:
            print(f"‚ùå Error cargando documentos: {e}")
        
        # 3. Verificar informaci√≥n
        print(f"\n3Ô∏è‚É£ Verificando informaci√≥n de documentos...")
        try:
            response = await client.get(
                f"{CHATBOT_SERVICE_URL}/api/v1/tenants/{TENANT_ID}/documents/info"
            )
            
            result = response.json()
            print(f"üìä Informaci√≥n de documentos:")
            print(f"   - Tenant ID: {result.get('tenant_id')}")
            print(f"   - Bucket URL: {result.get('bucket_url', 'N/A')}")
            print(f"   - Documentos: {result.get('document_count', 'N/A')}")
            print(f"   - Estado: {result.get('loaded_at', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå Error obteniendo informaci√≥n: {e}")
        
        # 4. Probar chat con contexto
        print(f"\n4Ô∏è‚É£ Probando chat con contexto de documentos...")
        test_queries = [
            "¬øCu√°les son las principales propuestas?",
            "¬øQu√© dice sobre educaci√≥n?",
            "¬øC√≥mo se aborda la seguridad?",
            "Hola, ¬øen qu√© puedo ayudar con la campa√±a?"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\n   üìù Pregunta {i}: {query}")
            try:
                chat_request = {
                    "query": query,
                    "session_id": f"test_session_{i}",
                    "user_context": {
                        "user_name": "Usuario de Prueba",
                        "user_state": "COMPLETED"
                    }
                }
                
                response = await client.post(
                    f"{CHATBOT_SERVICE_URL}/api/v1/tenants/{TENANT_ID}/chat",
                    json=chat_request
                )
                
                result = response.json()
                
                if response.status_code == 200:
                    response_text = result.get('response', 'Sin respuesta')
                    print(f"   ü§ñ Respuesta: {response_text[:300]}...")
                    print(f"   ‚è±Ô∏è Tiempo: {result.get('processing_time', 'N/A')}s")
                    
                    # Verificar si la respuesta parece usar contexto espec√≠fico
                    if any(keyword in response_text.lower() for keyword in ['propuesta', 'educaci√≥n', 'seguridad', 'campa√±a']):
                        print(f"   ‚úÖ Respuesta parece usar contexto espec√≠fico")
                    else:
                        print(f"   ‚ö†Ô∏è Respuesta parece gen√©rica")
                else:
                    print(f"   ‚ùå Error: {response.status_code}")
                    print(f"   üìÑ Detalle: {result}")
                    
            except Exception as e:
                print(f"   ‚ùå Error: {e}")
        
        # 5. Limpiar cache
        print(f"\n5Ô∏è‚É£ Limpiando cache...")
        try:
            response = await client.delete(
                f"{CHATBOT_SERVICE_URL}/api/v1/tenants/{TENANT_ID}/documents"
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ {result.get('message', 'Cache limpiado')}")
            else:
                print(f"‚ö†Ô∏è Error limpiando cache: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error limpiando cache: {e}")
    
    print("\nüéâ Prueba completada!")

def print_usage():
    """Imprime instrucciones de uso"""
    print("""
üìñ USO:

python test_real_documents.py <URL_DEL_DOCUMENTO>

Ejemplos:
python test_real_documents.py "https://storage.googleapis.com/mi-bucket/manifesto.txt"
python test_real_documents.py "https://raw.githubusercontent.com/usuario/repo/main/propuestas.txt"
python test_real_documents.py "https://example.com/documents/politica-educacion.pdf"

üí° TIP: Puedes usar URLs directas a archivos individuales o URLs a directorios/buckets.
""")

if __name__ == "__main__":
    print("üöÄ Prueba de Integraci√≥n con Documentos Reales")
    print("=" * 50)
    
    if len(sys.argv) != 2:
        print_usage()
        sys.exit(1)
    
    document_url = sys.argv[1]
    
    print(f"üéØ URL de documento: {document_url}")
    print(f"üè¢ Tenant ID: {TENANT_ID}")
    print(f"üåê Servicio: {CHATBOT_SERVICE_URL}")
    
    try:
        asyncio.run(test_with_real_url(document_url))
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Prueba interrumpida por el usuario")
    except Exception as e:
        print(f"\nüí• Error ejecutando prueba: {e}")
